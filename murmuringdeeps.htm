<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Murmuring Deeps</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Inter:wght@400;600&family=Lora:ital,wght@0,400..700;1,400..700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif; /* Base font */
            background-color: #111827; /* Tailwind gray-900 */
        }
        h1, h2 {
            font-family: 'Cinzel', serif;
        }
        /* Text reveal animation for individual lines/elements */
        .text-reveal {
            opacity: 0;
            transform: translateY(8px); /* Slight upward movement */
            animation: textRevealAnimation 1.2s ease-out forwards; /* Doubled duration */
            /* Use CSS custom property for animation delay */
            animation-delay: var(--animation-delay, 0s);
        }
        @keyframes textRevealAnimation {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        /* Ensure choices and ending elements are visible after text animation */
        .choices-appear, .ending-appear {
            opacity: 1; /* Start visible, or add a delayed fade-in if desired */
        }
        /* Apply Lora font to story paragraphs */
        main#story-container p.text-gray-300 { /* Target narrative paragraphs */
            font-family: 'Lora', serif;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-slate-900 via-gray-900 to-black text-gray-300 flex items-center justify-center min-h-screen p-4">

    <div id="game-container" class="w-full max-w-3xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-bold tracking-wider bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 via-teal-400 to-sky-500">The Murmuring Deeps</h1>
        </header>

        <main id="story-container" class="bg-gradient-to-br from-gray-800/80 via-slate-800/70 to-gray-900/80 rounded-lg shadow-2xl p-6 md:p-8">
            <!-- Story content will be dynamically inserted here -->
        </main>
    </div>

    <script>
        const storyContainer = document.getElementById('story-container');

        let storyData = {}; // To hold the fetched story data
        let navigationHistory = []; // To track visited events for the back button

        async function loadStory() {
            try {
                const response = await fetch('story.json');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                storyData = await response.json();
                navigateToEvent(1); // Start the game
            } catch (error) {
                console.error("Could not load story data:", error);
                storyContainer.innerHTML = "<p class='text-red-400 text-center'>Failed to load story. Please try again later.</p>";
            }
        }

        function navigateToEvent(eventId, isBackNavigation = false) {
            const event = storyData[eventId];
            if (!event) {
                console.error(`Event with id ${eventId} not found!`);
                // Optionally, inform the user or go to a safe state
                // For now, just log and return to prevent further errors.
                storyContainer.innerHTML = `<p class='text-red-400 text-center'>Error: Event ${eventId} not found. Please restart.</p>`;
                return;
            }

            if (!isBackNavigation) {
                navigationHistory.push(eventId);
            }
            _renderEventUI(eventId, isBackNavigation); // Pass isBackNavigation to control animation
        }

        function goBack() {
            if (navigationHistory.length > 1) {
                navigationHistory.pop(); // Remove the current event
                const previousEventId = navigationHistory[navigationHistory.length - 1]; // Get the new top event
                navigateToEvent(previousEventId, true); // Navigate back, true indicates it's a back navigation
            }
        }

        function _renderEventUI(eventId, skipAnimations = false) {
            const event = storyData[eventId];
            if (!event) {
                console.error(`Event with id ${eventId} not found!`);
                return;
            }
            
            // Clear previous content
            storyContainer.innerHTML = '';

            let currentAnimationDelay = 0.1; // Initial delay for the first animated element
            
            // Create header row for Back button and Title
            const headerRow = document.createElement('div');
            headerRow.className = "flex justify-start items-center mb-4"; // Aligns content to the left

            // Add Back button to header row if there's history
            if (navigationHistory.length > 1) {
                const backButton = document.createElement('div');
                backButton.setAttribute('role', 'button');
                backButton.setAttribute('tabindex', '0');
                // Smaller, de-emphasized, and to the left of the title
                backButton.className = "text-xs bg-gray-700 hover:bg-gray-600 text-gray-400 hover:text-gray-300 font-normal py-1 px-2 rounded shadow-sm cursor-pointer transition-colors duration-200 mr-3";
                backButton.textContent = "Back";
                
                backButton.addEventListener('click', goBack);
                backButton.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        goBack();
                    }
                });
                headerRow.appendChild(backButton);
            }

            // Create title and add to header row
            const titleElement = document.createElement('h2');
            // Apply gradient to event title text
            // Style like regular text (bold) with a sans-serif font, appears immediately
            titleElement.className = "text-base font-bold text-gray-300 font-sans";
            titleElement.textContent = event.title;
            headerRow.appendChild(titleElement);

            storyContainer.appendChild(headerRow); // Add the complete header row

            // Create text paragraphs
            event.text.forEach(paragraph => {
                const textElement = document.createElement('p');
                let paragraphClasses = "mb-4 text-gray-300 leading-relaxed";
                if (!skipAnimations) {
                    paragraphClasses += " text-reveal";
                    textElement.style.setProperty('--animation-delay', `${currentAnimationDelay}s`);
                    currentAnimationDelay += 0.5; // Doubled increment for slower staggering
                }
                textElement.className = paragraphClasses;
                textElement.textContent = paragraph;
                storyContainer.appendChild(textElement);
            });

            // Choices and endings will appear after the text animations are set up.
            // We can wrap them in a container and apply a final animation if needed, or let them appear immediately.
            // Create choices if they exist
            if (event.choices && event.choices.length > 0) {
                const choicesList = document.createElement('div');
                choicesList.className = "mt-6 border-t border-cyan-400 border-opacity-30 pt-4 flex flex-col items-center gap-3";
                if (!skipAnimations) {
                    choicesList.classList.add("text-reveal"); // Use the same reveal animation
                    choicesList.style.setProperty('--animation-delay', `${currentAnimationDelay}s`); // Delay after last paragraph
                }
                
                event.choices.forEach(choice => {
                    const choiceElement = document.createElement('div');
                    choiceElement.setAttribute('role', 'button');
                    choiceElement.setAttribute('tabindex', '0');
                    choiceElement.className = "w-full max-w-md text-center bg-gray-700 hover:bg-cyan-800 text-cyan-200 font-semibold py-3 px-4 rounded-lg shadow-md cursor-pointer transition-all duration-300 transform hover:scale-105";
                    choiceElement.textContent = choice.text;
                    
                    const eventHandler = () => navigateToEvent(choice.target); // Use navigateToEvent for forward movement
                    choiceElement.addEventListener('click', eventHandler);
                    choiceElement.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter' || e.key === ' ') {
                           e.preventDefault();
                           eventHandler();
                        }
                    });

                    choicesList.appendChild(choiceElement);
                });
                storyContainer.appendChild(choicesList);
            }

            // Handle endings
            if (event.isEnding) {
                const endTitle = document.createElement('p');
                endTitle.className = "mt-6 text-center text-2xl font-bold text-red-400 tracking-wider ending-appear"; // Added ending-appear
                endTitle.textContent = "THE END";
                storyContainer.appendChild(endTitle);
                
                const restartButton = document.createElement('div');
                restartButton.setAttribute('role', 'button');
                restartButton.setAttribute('tabindex', '0');
                restartButton.className = "mt-4 w-full max-w-md mx-auto text-center bg-red-700 hover:bg-red-600 text-white font-semibold py-3 px-4 rounded-lg shadow-md cursor-pointer transition-all duration-300 transform hover:scale-105 ending-appear"; // Added ending-appear
                restartButton.textContent = "Play Again";

                const restartHandler = () => {
                    navigationHistory = []; // Clear history on restart
                    navigateToEvent(1);    // Navigate to the starting event
                };
                restartButton.addEventListener('click', restartHandler);
                restartButton.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        restartHandler();
                    }
                });

                storyContainer.appendChild(restartButton);
            }
        }

        // Load story data to begin
        loadStory();
    </script>

</body>
</html>
